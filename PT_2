def task1(a, b, c):
    return max(a, b, c) //повертає найбільше з трьох чисел

def task2(numbers):
    return sum(numbers) //повертає суму всіх чисел

def task3(numbers):
    result = 1 //ініціалізує змінну значенням 1 для накопичення добутку чисел у списку
    for num in numbers: //використовує цикл для ітерації через всі елементи
        result *= num //множить поточний результат на поточний елемент, оновлюється значення
    return result //повертає знайдений добуток 

def task4(input_str):
    return input_str[::-1] //рядок повертається у зворотньому порядку

def task5(n):
    if n == 0 or n == 1: //перевіряє випадок, коли n дорівнює 0 або 1
        return 1 //повертає 1, оскільки факторіал 0 та факторіал 1 обидва рівні 1
    else:
        return n * task5(n - 1) //якщо n не дорівнює 0 або 1, функція повертає добуток числа n 

def task6(number):
    return 25 <= number <= 50 //використовується порівняння для перевірки, чи число number знаходиться в інтервалі від 25 до 50 включно.

def task7(input_str):
    upper_count = sum(1 for char in input_str if char.isupper()) //обчислює кількість великих літер у рядку
    lower_count = sum(1 for char in input_str if char.islower()) //обчислює кількість малих літер у рядку 
    return upper_count, lower_count //повертає два значення

def task8(input_list):
    return list(set(input_list)) //видаляє дублікати зі списку та повертає новий список, що містить лише унікальні елементи

def task9(input_list):
    return [num for num in input_list if num % 2 == 0] //додає лише ті числа num, для яких залишок від ділення на 2 дорівнює 0, тобто ті, які є парними числами.

def task10():
    def generate_pascals_triangle(n): //створює трикутник Паскаля до n-го рядка
        triangle = [[1]] //створює початковий рядок трикутника Паскаля
        for _ in range(n - 1): //виконує цикл для генерації наступних n-1 рядків трикутника
            row = [1] //створює новий рядок трикутника
            for j in range(1, len(triangle[-1])): //проходиться по попередньому рядку трикутника і додає до поточного рядка елементи
                row.append(triangle[-1][j - 1] + triangle[-1][j])
            row.append(1) //додає останній елемент 1 до поточного рядка
            triangle.append(row) //додає поточний рядок до трикутника
        return triangle

    pascals_triangle = generate_pascals_triangle(10) //генерує трикутник Паскаля до 10-го рядка
    last_row = pascals_triangle[-1] //отримує останній рядок трикутника Паскаля
    return max(last_row) //Отримує останній рядок трикутника Паскаля
